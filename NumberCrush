#include <iostream>
#include <iomanip>
#include <cctype>
#include <cstdlib>
#include <vector>

using namespace std;

namespace
{

    typedef vector <unsigned> CVLine; // un type représentant une ligne de la grille
    typedef vector <CVLine> CMat; // un type représentant la grille
    typedef pair <unsigned, unsigned> CPosition; // une position dans la girlle


    void ClearScreen ()
    {
        cout << "\033[H\033[2J";
    }


    const string KReset   ("0");
    const string KNoir    ("30");
    const string KRouge   ("31");
    const string KVert    ("32");
    const string KJaune   ("33");
    const string KBleu    ("34");
    const string KMAgenta ("35");
    const string KCyan    ("36");

    const unsigned KNbCandies = 5;
	
    void Couleur (const string & coul)
    {
        cout << "\033[" << coul <<"m";
    }

    void  DisplayGrid (const CMat & Grid)
    {
	    ClearScreen ();
	    Couleur(KReset);
	    for(unsigned i = 0; i < Grid.size(); ++i)
	    {
		    for(unsigned j = 0;j < Grid[0].size(); ++j)
            {
                if(0 != Grid[i][j])
                    cout << setw(4) << Grid[i][j];
                else
                    cout << setw(4) << " " ;   
            }
            cout << endl;
	    }
    }

    void InitGrid (CMat & Grid, unsigned Size)
    {
        Grid.resize(Size);
        for(unsigned i = 0; i < Size; ++i)
            {
                Grid.at(i).resize(Size);
                for(unsigned j = 0;j < Size; ++j)
                {
                    Grid[i][j] = rand() % KNbCandies + 1 ;
                }
            }
    }

    void MakeAMove (CMat & Grid, const CPosition & Pos, char Direction)
    {
        
    }
    

}


int main()
{
    CMat Matrice;
    InitGrid(Matrice, 5);
	DisplayGrid(Matrice);

    return 0;
}
